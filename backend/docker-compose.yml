services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: secondbrain-postgres
    environment:
      POSTGRES_DB: secondbrain
      POSTGRES_USER: secondbrain
      POSTGRES_PASSWORD: demo123
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U secondbrain -d secondbrain"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: secondbrain-redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - ./data/redis:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # MinIO 对象存储
  minio:
    image: minio/minio:latest
    container_name: secondbrain-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: demo123456
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./data/minio:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Qdrant 向量数据库
  qdrant:
    image: qdrant/qdrant:latest
    container_name: secondbrain-qdrant
    ports:
      - "6333:6333"
    volumes:
      - ./data/qdrant:/qdrant/storage

  # 后端API服务（开发模式，热重载）
  api:
    build: .
    container_name: secondbrain-api
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    environment:
      DATABASE_URL: "postgresql+asyncpg://secondbrain:demo123@postgres:5432/secondbrain"
      REDIS_URL: "redis://redis:6379"
      MINIO_ENDPOINT: "minio:9000"
      QDRANT_HOST: "qdrant"
      SECRET_KEY: "demo-secret-key-please-change-in-production"
      DEBUG: "true"
    ports:
      - "8000:8000"
    volumes:
      - ./app:/app
      - ./alembic:/alembic
      - ./alembic.ini:/alembic.ini
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      qdrant:
        condition: service_started
